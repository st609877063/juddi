<?xml version='1.0'?>
<!--
 * Copyright 2001-2009 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */ -->

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "jUDDI_User_Guide.ent">
%BOOK_ENTITIES;
]>

<!-- chapter: Using the UDDI-Client -->
<chapter id="chap-Using_jUDDI-Client">
    <title>Using the jUDDI-Client</title>
    
    <!-- section: Introduction -->
    <sect1 id="sect-jUDDI_Client_intro">
        <title>Introduction</title>
        <para>
        The jUDDI project includes UDDI Client code (<filename>juddi-client-3.x.jar</filename>), 
        which is Java client library to connect to a UDDI Registry, and to manipulate it.
        The client uses the UDDI v3 API and can be configured to connect to any
        UDDI v3 compliant registry (it has been tested against jUDDI v3 itself as well as
        against HP Systenet). This library can be embedded in your own application and used
        programmatically or by using annotations.
        </para>
    </sect1>
   
    programmatically
    
    WSDL
    BPEL
    annotations
    cleint side key generation
    
    
    
    <!-- section: Configuration -->
    <sect1 id="sect-configuration">
        <title>Configuration</title>
		
        <para>
        For the client to connect to the UDDI server we need to provide it with the correct connection settings,
        which we call 'Transport' settings. In addition to these transport settings there are other client features
        that can be configured using the client configuration file <filename>META-INF/uddi.xml</filename>. 
        You can deploy one of these client configuration files in your deployment archive that is
        interacting with the UDDI client code. To make sure the configuration is read you need to either call 
        <programlisting language="Java" >
UDDIClerkManager clerkManager = new UDDIClerkManager("META/myuddi.xml");
clerkManager.start();
		</programlisting>
        or you if your application deploys are a war archive, you can add your client config in
        <filename>yourwar/META-INF/myuddi.xml</filename>, add in the web.xml specify
        the context parameters <filename>uddi.client.manager.name</filename> and <filename>uddi.client.xml</filename>.
        In the following example both context parameters are set and on deployment the UDDIClerkServlet
        takes care of reading the configuration.
        <programlisting language="XML" ><xi:include href="extras/Using_jUDDI-Client_1_web_xml.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        The following is an example of a simple client configuration file:
        <programlisting language="XML" ><xi:include href="extras/Using_jUDDI-Client_1.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        The manager element is required element, and the name attribute 'example-manager' should be unique in your deployment
        environment. The nodes element may contain one or more node elements. Typically you would only
        need one node, unless you are using subscriptions to transfer updates of entities from one UDDI registry to 
        another. For the 'local' registry you would set isHomeJUDDI="true", while for the 'remote' registries you would
        set isHomeJUDDI="false". 
        <table title="node element">
        <tr><th>element name</th><th>description</th><th>required</th></tr>
        <tr><td>name</td><td>name of the node</td><td>yes</td></tr>
        <tr><td>description</td><td>description of the node</td><td>no</td></tr>
        <tr><td>properties</td><td>container for properties that will be passed into the clerk</td><td>no</td></tr>
        <tr><td>proxyTransport</td><td>The transport protocol used by the client to connect to the UDDI server</td><td>yes</td></tr>
        <tr><td>custodyTransferUrl</td><td>Connection settings for custody transfer</td><td>no</td></tr>
        <tr><td>inquiryUrl</td><td>Connection location settings for inquiries</td><td>yes</td></tr>
        <tr><td>publishUrl</td><td>Connection location settings for publishing</td><td>yes</td></tr>
        <tr><td>securityUrl</td><td>Connection location settings for obtaining security tokens</td><td>yes</td></tr>
        <tr><td>subscriptionUrl</td><td>Connection location settings for registering subscription requests</td><td>no</td></tr>
        <tr><td>subscriptionListenerUrl</td><td>Connection location settings receiving subscription notifications</td><td>no</td></tr>
        <tr><td>juddiApiUrl</td><td>Connection location settings for the jUDDI specific API for things like publisher management</td><td>no</td></tr>
        </table>
        Finally the manager element can contain a 'clerks' element in which one can define one or more clerks.
        <table title="clerk">
        <tr><th>attribute name</th><th>description</th><th>required</th></tr>
        <tr><td>name</td><td>name of the clerk</td><td>yes</td></tr>
        <tr><td>node</td><td>name reference to one of the nodes specified in the same manager</td><td>yes</td></tr>
        <tr><td>publisher</td><td>name of an existing publisher</td><td>yes</td></tr>
        <tr><td>password</td><td>password credential of the publisher</td><td>yes</td></tr>
        </table>
        </para>
        
        <!-- subsection: JAX-WS Transport -->
        <sect2 id="sect-JAX-SW_transport">
        <title>JAX-WS Transport</title>
        <para>
        Using the settings in the <filename>uddi.xml</filename> file from above,
        the client will use JAX-WS to communicate with the (remote) registry server. This
        means that the client needs to have access to a JAX-WS compliant WS stack (such as
        CXF, Axis2 or JBossWS). Note that the juddiApiUrl is a reference to the WSDL endpoint while
        the others should reference the actual endpoints.
        </para>
        <programlisting  language="XML"><xi:include href="extras/Using_jUDDI-Client_2jaxws.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    	<para>pros: Standard way of UDDI communication, should work with all UDDIv3 server implementations.</para>
    	<para>cons: If the server is deployed on the same application server this may lead to issues when
    	auto-registration on deployment/undeployment is used, since the WS stack may become unavailable during
    	undeployment. A workaround is to host the UDDI server on a different server.</para>
    	</sect2>
    
	    <!-- section: RMI Transport -->
	    <sect2 id="sect-RMI_transport">
	        <title>RMI Transport</title>
	
	        <para>
	        If jUDDI server is deployed to an Application Server it is possible to register the
	        UDDI Services as RMI services. If this is desired you need to edit the
	        <filename>juddiv3.war/WEB-INF/classes/juddiv3.properties</filename> 
	        file, on the server. Add the following setting
	        </para>
	        
	        <programlisting language="Java" ><xi:include href="extras/Using_jUDDI-Client_1.java" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
	
	        <para>
	        At deployment time the RMI based UDDI services are bound into the Global JNDI
	        namespace.
	        </para>
	        
	        <variablelist>
	            <varlistentry>
	                <term>juddi (class: <classname>org.jnp.interfaces.NamingContext</classname>)</term>
	                <listitem>
	                    <itemizedlist>
	                        <listitem>
	                            <para>
	                            UDDIPublicationService (class: <classname>org.apache.juddi.rmi.UDDIPublicationService</classname>)
	                            </para>
	                        </listitem>
	                        <listitem>
	                            <para>
	                            UDDICustodyTransferService (class: <classname>org.apache.juddi.rmi.UDDICustodyTransferService</classname>)
	                            </para>
	                        </listitem>
	                        <listitem>
	                            <para>
	                            UDDISubscriptionListenerService (class: <classname>org.apache.juddi.rmi.UDDISubscriptionListenerService</classname>)
	                            </para>
	                        </listitem>
	                        <listitem>
	                            <para>
	                            UDDISecurityService (class: <classname>org.apache.juddi.rmi.UDDISecurityService</classname>)
	                            </para>
	                        </listitem>
	                        <listitem>
	                            <para>
	                            UDDISubscriptionService (class: <classname>org.apache.juddi.rmi.UDDISubscriptionService</classname>)
	                            </para>
	                        </listitem>
	                        <listitem>
	                            <para>
	                            UDDIInquiryService (class: <classname>org.apache.juddi.rmi.UDDIInquiryService</classname>)
	                            </para>
	                        </listitem>
	                    </itemizedlist>
	                </listitem>
	            </varlistentry>
	
	        </variablelist>
	        
	        <para>
	        Next, on the client side you need to comment out the JAXWS section in the
	        <filename>uddi.xml</filename> file and use the RMI Transport section
	        instead. Optionally you can set the <literal>java.naming.*</literal> properties.
	        In this case we specified setting for connecting to jUDDIv3 deployed to a JBoss
	        Application Server. You can set the <literal>java.naming.*</literal>
	        properties in a <filename>jndi.xml</filename> file, or as System
	        parameters.
	        </para>
	        <programlisting  language="XML"><xi:include href="extras/Using_jUDDI-Client_2rmi.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
	        <para>pros: Leight weight, and faster since it does not need a WS stack.</para>
	        <para>cons: Will only work with a jUDDIv3 server implementation.</para>
	    </sect2>
  
	    <!-- section: InVM Transport -->
	    <sect2 id="sect-InVM_transport">
	        <title>InVM Transport</title>
	        
	        <para>
	        If you choose to use InVM Transport this means that the jUDDIv3 server is running
	        in the same VM as you client. If you are deploying to
	        <filename>juddi.war</filename> the embedded server will be started by the
	        <classname>org.apache.juddi.RegistryServlet</classname>, but if you are running
	        outside any container, you are responsible for starting and stopping the
	        <classname>org.apache.juddi.Registry</classname> Service yourself. Make sure to
	        call
	        </para>
	    
	        <programlisting language="Java" ><xi:include href="extras/Using_jUDDI-Client_2.java" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
	
	        <para>
	        before making any calls to the Registry, and when you are done using the Registry
	        (on shutdown) call
	        </para>
	    
	        <programlisting language="Java" ><xi:include href="extras/Using_jUDDI-Client_3.java" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
	
	        <para>
	        so the Registry can release any resources it may be holding. To use InVM Transport
	        uncomment this section in the <filename>uddi.properties</filename> while
	        commenting out the JAXWS and RMI Transport sections.
	        </para>
	        
	        <programlisting  language="XML"><xi:include href="extras/Using_jUDDI-Client_2invm.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            <para>pros: Lightest weight, and best performant communication, and no deployment order issues
            when using auto-registration of services during deployment and undeployment.</para>
            <para>cons: Will only work with a jUDDIv3 server implementation. Typically one would
            use a jUDDI server for each application server sharing one common database.</para>
	    </sect2>
	</sect1>
	
	<!-- chapter: Using the UDDI-Client -->
	<sect1 id="chap-UDDI_annotations">
    <title>UDDI Annotations</title>

    <!-- section: Introduction -->
    <sect2 id="sect-intro_annotations">
        <title>Introduction</title>
        <para>
        	Conventionally Services (BusinessService) and their EndPoints (BindingTemplates) are registered to a UDDI Registry using a GUI, where an
        	admin user manually adds the necessary info. This process tends to make the data in the Registry rather static
        	and the data can grow stale over time. To make the data in the UDDI more dynamic it makes sense to register
        	and EndPoint (BindingTemplate) when it comes online, which is when it gets deployed. The UDDI annotations are 
        	designed to just that: register a Service when it get deployed to an Application Server. There
        	are two annotations: UDDIService, and UDDIServiceBinding. You need to use both annotations to register an EndPoint. 
        	Upon undeployment of the Service, the EndPoint will be de-registered from the UDDI. The Service information stays
        	in the UDDI. It makes sense to leave the Service level information in the Registry since this reflects that the 
        	Service is there, however there is no EndPoint at the moment ("Check back later"). It is a manual process to remove
        	the Service information. The annotations use the juddi-client library which means that they can be used to register
        	to any UDDIv3 registry.
        </para>
    </sect2>
    
    <!-- section: @UDDIService -->
    <sect2 id="sect-UDDIService">
        <title>UDDIService Annotation</title>
        <para>
        The UDDIService annotation is used to register a service under an already existing business in the Registry. The
        annotation should be added at the class level of the java class.
        <table><title>UDDIService attributes</title>
			<tgroup cols="3" >
			<colspec colnum="1" colname="col1" />
			<colspec colnum="2" colname="col2" />
			<colspec colnum="3" colname="col3" />
			<thead>
				<row>
				 	<entry>attribute</entry><entry>description</entry><entry>required</entry>
				</row>
			</thead>
			<tbody>
				<row>
				 	<entry>serviceName</entry>
				 	<entry>The name of the service, by default the clerk will use the one name specified in the WebService annotation</entry>
				 	<entry>no</entry>
				 </row>
				 <row>
				 	<entry>description</entry>
				 	<entry>Human readable description of the service</entry>
				 	<entry>yes</entry>
				 </row>
				 <row>
				 	<entry>serviceKey</entry>
				 	<entry>UDDI v3 Key of the Service</entry>
				 	<entry>yes</entry>
				 </row>
				 <row>
				 	<entry>businessKey</entry>
				 	<entry>UDDI v3 Key of the Business that should own this Service. The business should exist in the registry at time of registration</entry>
				 	<entry>yes</entry>
				 </row>
				 <row>
				 	<entry>lang</entry>
				 	<entry>Language locale which will be used for the name and description, defaults to "en" if omitted</entry>
				 	<entry>no</entry>
				 </row>
				 <row>
				 	<entry>categoryBag</entry>
				 	<entry>Definition of a CategoryBag, see below for details</entry>
				 	<entry>no</entry>
				 </row>
			</tbody>
			</tgroup>
		</table>
        </para>
    </sect2>
    
    <!-- section: @UDDIServiceBinding -->
    <sect2 id="sect-UDDIServiceBinding">
        <title>UDDIServiceBinding Annotation</title>
        <para>
            The UDDIServiceBinding annotation is used to register a BindingTemplate to the UDDI registry. This annotation
            cannot be used by itself. It needs to go along side a UDDIService annotation.
        	<table><title>UDDIServiceBinding attributes</title>
			<tgroup cols="3" >
			<colspec colnum="1" colname="col1" />
			<colspec colnum="2" colname="col2" />
			<colspec colnum="3" colname="col3" />
			<thead>
				<row>
				 	<entry>attribute</entry><entry>description</entry><entry>required</entry>
				</row>
			</thead>
			<tbody>
				<row>
				 	<entry>bindingKey</entry>
				 	<entry>UDDI v3 Key of the ServiceBinding</entry>
				 	<entry>yes</entry>
				 </row>
				 <row>
				 	<entry>description</entry>
				 	<entry>Human readable description of the service</entry>
				 	<entry>yes</entry>
				 </row>
				 <row>
				 	<entry>accessPointType</entry>
				 	<entry>UDDI v3 AccessPointType, defaults to wsdlDeployment if omitted</entry>
				 	<entry>no</entry>
				 </row>
				 <row>
				 	<entry>accessPoint</entry>
				 	<entry>Endpoint reference</entry>
				 	<entry>yes</entry>
				 </row>
				 <row>
				 	<entry>lang</entry>
				 	<entry>Language locale which will be used for the name and description, defaults to "en" if omitted</entry>
				 	<entry>no</entry>
				 </row>
				 <row>
				 	<entry>tModelKeys</entry>
				 	<entry>Comma-separated list of tModelKeys key references</entry>
				 	<entry>no</entry>
				 </row>
				 <row>
				 	<entry>categoryBag</entry>
				 	<entry>Definition of a CategoryBag, see below for further details</entry>
				 	<entry>no</entry>
				 </row>
		    </tbody>
		    </tgroup>
		    </table>
        </para>
        <sect3 id="sect-CategoryBag">
	       <title>CategoryBag Attribute</title>
	       <para>
	       The CategoryBag attribute allows you to reference tModels. For example the following categoryBag
	       <programlisting>
&lt;categoryBag&gt;
   &lt;keyedReference tModelKey="uddi:uddi.org:categorization:types" 
    keyName="uddi-org:types:wsdl" keyValue="wsdlDeployment" /&gt; 
   &lt;keyedReference tModelKey="uddi:uddi.org:categorization:types" 
    keyName="uddi-org:types:wsdl2" keyValue="wsdlDeployment2" /&gt;
&lt;/categoryBag&gt; 
	        </programlisting>
	        can be put in like
	        <programlisting>
categoryBag="keyedReference=keyName=uddi-org:types:wsdl;keyValue=wsdlDeployment;" +
"tModelKey=uddi:uddi.org:categorization:types," +  
"keyedReference=keyName=uddi-org:types:wsdl2;keyValue=wsdlDeployment2;" +
"tModelKey=uddi:uddi.org:categorization:types2",
            </programlisting>
            </para>
        </sect3>
    </sect2>
    
    <sect2 id="sect-WebServiceExample">
        <title>WebService Example</title>
        <para>
        The annotations can be used on any class that defines a service. Here they are added to a WebService, a POJO with a 
        JAX-WS 'WebService' annotation.
        <programlisting><xi:include href="extras/HelloWorldImpl.java" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        On deployment of this WebService, the juddi-client code will scan this class for UDDI annotations and take care of the
        registration process. In the configuration file <filename>uddi.xml</filename>, in the clerk section you need to reference
        the Service class 'org.apache.juddi.samples.HelloWorldImpl':
        <programlisting>
&lt;clerks registerOnStartup="true"&gt;
  &lt;clerk name="BobCratchit" node="default" publisher="bob" password="bob"&gt; 
    &lt;class&gt;org.apache.juddi.samples.HelloWorldImpl&lt;/class&gt;  
  &lt;/clerk&gt;
&lt;/clerks&gt;
        </programlisting>
        which means that Bob is using the node connection setting of the node with name "default", and that he will be 
        using the "bob" publisher, for which the password it "bob". There is some analogy here as to how datasources 
        for database access are defined.
        </para>
    </sect2>
    
    <sect2>
        <title>Templating keys</title>
        <para>
        The business, service and binding keys can contain property references. This allows you to define a
        keyTemplate in the annotation attribute for the key and the value of the properties used
        in the template will be resolved at registration time.
        </para>
    </sect2>

    </sect1>

    <sect1 id="sect-programmatic">
        <title>Programmatic use</title>
        <para>
        It is also possible to use the jUDDI client code in your application. The first thing to do is
        to read the client config file, and get a handle to a clerk
      <programlisting language="Java" >
UDDIClerkManager clerkManager = new UDDIClerkManager("META/myuddi.xml");
clerkManager.start();

UDDIClerk clerk = clerkManager.getClientConfig().getUDDIClerks().get(clerkName);
        </programlisting>
        A UDDIClerk will allow you do make authenticated requests to a UDDI server.
        </para>
        
        <sect2>
        <title>WSDL Registration</title>
        <para>
        The OASIS UDDI spec TC put out a Techical Note on "Using WSDL in a UDDI Registry"
        <citation><xref linkend="technote.wsdl2uddi" endterm="technote.wsdl2uddi.abbrev"/></citation>. The 
        jUDDI client implements the UDDI v3 version of the WSDL2UDDI mapping as described 
        in this technical note. The registration process registers a BindingTemplate for
        each WebService EndPoint and if the BusinessService for this BindingTemplate does not
        yet exist it also registers the BusinessService along with a WSDLPortType TModel for each portType, 
        and a WSDLBinding TModel for each binding. To use it you can use the code in the 'org.apache.juddi.v3.client.mapping'
        package <citation><xref linkend="javadoc.wsdl2uddi" endterm="javadoc.wsdl2uddi.abbrev"/></citation>
        and make the following call to asynchronously register your WebService EndPoint. 
      <programlisting language="Java" >
//Add the properties from the uddi.xml
properties.putAll(clerk.getUDDINode().getProperties());
RegistrationInfo registrationInfo = new RegistrationInfo();
registrationInfo.setServiceQName(serviceQName);
registrationInfo.setVersion(version);
registrationInfo.setPortName(portName);
registrationInfo.setServiceUrl(serviceUrl);
registrationInfo.setWsdlUrl(wsdlURL);
registrationInfo.setWsdlDefinition(wsdlDefinition);
registrationInfo.setRegistrationType(RegistrationType.WSDL);
registration = new AsyncRegistration(clerk, urlLocalizer, properties, registrationInfo);
Thread thread = new Thread(registration);
thread.start();
        </programlisting>
        This does assume that you can pass in a URL to the WSDL file as well as the WSDLDefinition.
        In most cases you will need to package up the WSDL file you are trying to register in your 
        deployment. You can get a WSDLDefinition using
        <programlisting language="Java" >
ReadWSDL readWSDL = new ReadWSDL();
Definition definition = readWSDL.readWSDL("wsdl/HelloWorld.wsdl");
        </programlisting>
        where you would pass in the path to the WSDL on the classpath.
        </para>
        
        <para>To remove a WSDL binding from the Registry you would use
        <programlisting language="Java" >
BPEL2UDDI bpel2UDDI = new BPEL2UDDI(clerk, urlLocalizer, properties);
String serviceKey = bpel2UDDI.unRegister(serviceName, portName, serviceURL);
        </programlisting>
        If this is the last BindingTemplate for the BusinessService it will also remove the 
        BusinessService along with the WSDLPortType and WSDLBinding TModels. The
        lifecycle is registration on Endpoint deploy and unregistration on Endpoint undeploy.
        </para>
    </sect2>
    
    <sect2>
        <title>BPEL Process Registration</title>
        <para>Similar to the WSDL to UDDI mapping there is a BPEL to UDDI mapping Technical
        Note <citation><xref linkend="technote.bpel2uddi" endterm="technote.bpel2uddi.abbrev"/></citation>. 
        The jUDDI client also implements this mapping. Using it is very similar to 
        code fragment listed for the WSDL Registration, with the only change being that in this case
        the RegistrationInfo.RegistrationType should be RegistrationType.BPEL. See To use it you can use the code in the 'org.apache.juddi.v3.client.mapping'
        package <citation><xref linkend="javadoc.bpel2uddi" endterm="javadoc.bpel2uddi.abbrev"/></citation>
        for more information on the implementation. For an example use of the registration process
        see the JBoss RiftSaw project <citation><xref linkend="java.bpel2uddi" endterm="java.bpel2uddi.abbrev"/></citation>.
        </para>
    </sect2>
    
     <sect2>
        <title>Conventions around UDDIv3 registration</title>
        <sect3>
            <title>Key Templates</title>
            <para>
            Both the WSDL and BPEL registration code use a key format convention to construct UDDI v3 keys. The
            format of the keys can be defined in the properties section of the <filename>uddi.xml</filename>, but
            they have reasonable defaults. Note that the both the serviceName and portName are obtained from 
            the RegistrationInfo. The nodeName can be obtained from the environment, or set in the 
            <filename>uddi.xml</filename>.
            <table title="Key Templates and related properties">
            <tr><th>Property</th><th>Description</th><th>Required</th><th>Default Value</th></tr>
            <tr><td>lang</td><td>The language setting used by the registration.</td><td>no</td><td>en</td></tr>
            <tr><td>businessName</td><td>The business name which is used by.</td><td>yes</td><td></td></tr>
            <tr><td>keyDomain</td><td>The key domain key part (used by the key formats)</td><td>yes</td></tr>
            <tr><td>businessKeyFormat</td><td>Key format used to contruct the Business Key</td><td>no</td><td>uddi:${keyDomain}:business_${businessName}</td></tr>
            <tr><td>serviceKeyFormat</td><td>Key format used to contruct the BusinessService Key</td><td>no</td><td>uddi:${keyDomain}:service_${serviceName}</td></tr>
            <tr><td>bindingKeyFormat</td><td>Key format used to contruct the TemplateBinding Key</td><td>no</td><td>uddi:${keyDomain}:binding_${nodeName}_${serviceName}_${portName}</td></tr>
            <tr><td>serviceDescription</td><td>Default BusinessService description</td><td>no</td><td>Default service description when no &lt;wsdl:document&gt; element is defined inside the &lt;wsdl:service&gt; element.</td></tr>
            <tr><td>bindingDescription</td><td>Default BindingTemplate description</td><td>no</td><td>Default binding description when no &lt;wsdl:document&gt; element is defined inside the &lt;wsdl:binding&gt; element.</td></tr>
            </table>
            
            </para>
        </sect3>
         <sect3>
            <title>Specification of service and binding descriptions in the WSDL</title>
            <para>The UDDI spec allows for setting a human readable description on both the BusinessService and TemplateBinding. Theses description fields
            are important if humans are browsing the registry. A default description can be specific in the <filename>uddi.xml</filename>, however
            it makes a lot more sense to have a specific description for each service and binding, and so the registration code tries to obtain these
            descriptions from the &lt;wsdl:document&gt; tags in the WSDL, which can be nested as a child element inside the
             &lt;wsdl:service&gt; and &lt;wsdl:binding&gt; elements.
            </para>
        </sect3>
        <sect3>
            <title>URLLocalizer</title>
            <para>The setting of the EndPoint URL is obtained from provided WSDL in the &lt;soap:addressbinding&gt; of the
            &lt;wsdl:port&gt;. The issue with this is that this URL is static, and you it is very useful if it can
            be made more dynamic. For this reason you can implement your own version of the <ulink
            url="http://svn.apache.org/repos/asf/juddi/trunk/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/URLLocalizer.java">
            URLLocalizer interface</ulink>. In for example the version <ulink url="http://anonsvn.jboss.org/repos/riftsaw/trunk/runtime/uddi/src/main/java/org/jboss/soa/bpel/uddi/JBossURLLocalizer.java">
            shipped with RiftSaw</ulink> the protocol and the host parts of the URL are overriden with the
            settings obtain from the local WebService Stack.</para>
        </sect3>
        
    </sect2>
    
    </sect1>
    
    <sect1 id="sect-service-lookup">
        <title>Dynamic UDDI Service Lookup</title>
        <para>For a client application to invoke a Service it needs to know the actual binding information of
        the WebService EndPoint. This information can be statically stored at the clientside but this will make
        the system very rigid. For example if a service moves from one server to another the client will not
        pick up this change. It therefor makes sense to do a lookup into the UDDI registry to obtain fresh)
        binding information. This will make the solution dynamic, and allows for clients simply following
        the changes that occur in the service deployment topology. 
        <sect2 id="sect-service-locator">
            <title>Service Locator</title>
            <para>The serviceLocator <citation><xref linkend="javadoc.servicelocator" endterm="javadoc.servicelocator.abbrev"/></citation>
            can be used to locate a service binding knowing the service and port name. The following
            piece of code demonstrates how to do a lookup:
            <programlisting language="Java" >
ServiceLocator serviceLocator = new ServiceLocator(clerk, urlLocalizer, properties);
String endPointURL = lookupEndpoint(serviceQName, String portName);
            </programlisting>
            </para>
        </sect2>
        
        When the above UDDI v3 serviceKey conventions are 
        followed, then all the client needs to know is the serviceName and portName it want to invoke and the
        
        
        
        The downside of doing a service lookup before each service invokation is that
        it will have a performance inpact.
        
        </para>
        
    </sect1>
    <!-- section: Dependencies -->
    <sect1 id="sect-dependencies">
        <title>Dependencies</title>

        <para>
        The UDDI client depends on <filename>uddi-ws-3.x.jar</filename>,
        <filename>commons-configuration-1.5.jar</filename>,
        <filename>commons-collection-3.2.1.jar</filename> and
        <filename>log4j-1.2.13.jar</filename>, plus
        </para>

        <itemizedlist>
            <listitem>
                <para>
                libraries for JAXB if you are not using JDK5.
                </para>
            </listitem>
            <listitem>
                <para>
                JAXWS client libraries when using JAXWS transport (like CXF).
                </para>
            </listitem>
            <listitem>
                <para>
                RMI and JNDI client libraries  when using RMI Transport.
                </para>
            </listitem>
        </itemizedlist>
        
    </sect1>
    
    <!-- section: Sample Code -->
    <sect1 id="sect-sample_code">
        <title>Sample Code</title>

        <para>
        Sample code on how to use the UDDI client can be found in the
        <literal>uddi-client</literal> module on the jUDDIv3 project. Usually the first
        thing you want to is to make a call to the Registry to obtain an Authentication
        Token. The following code is taken from the unit tests in this module.
        </para>
    
        <programlisting language="Java" ><xi:include href="extras/Using_jUDDI-Client_4.java" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        
        <para>
        Make sure that the publisher, in this case “root” is an existing publisher in the
        Registry and that you are supplying the correct credential to get a successful
        response. If needed check <xref linkend="chap-Authentication" /> to learn more
        about this subject.
        </para>

        <para>
        Another place to look for sample code is the <filename>docs/examples/helloword</filename> 
        directory. Alternatively you can use annotations.
        </para>

    </sect1>
    
    <sect1 id="sect-references">
        <title>References</title>
        <para><bibliolist>
        <biblioentry id="technote.wsdl2uddi">
          <abbrev id="technote.wsdl2uddi.abbrev">WSDL-UDDI</abbrev>
          <authorgroup>
            <author><firstname>John</firstname><surname>Colgrave</surname></author>
            <author><firstname>Karsten</firstname><surname>Januszewski</surname></author>
          </authorgroup>
          <title><ulink url="http://www.oasis-open.org/committees/uddi-spec/doc/tn/uddi-spec-tc-tn-wsdl-v2.htm">Using WSDL in a UDDI Registry, Version 2.0.2</ulink></title>
          <publishername>OASIS UDDI Spec TC</publishername>
          <pubdate>2004</pubdate>
        </biblioentry>
        <biblioentry id="javadoc.wsdl2uddi">
          <abbrev id="javadoc.wsdl2uddi.abbrev">WSDL2UDDI</abbrev>
          <title><ulink url="http://juddi.apache.org/apidocs/org/apache/juddi/v3/client/mapping/WSDL2UDDI.html">Apache jUDDI WSDL2UDDI Javadoc</ulink></title>
          <publishername>Apache jUDDI</publishername>
          <pubdate>2011</pubdate>
        </biblioentry>
        <biblioentry id="technote.bpel2uddi">
          <abbrev id="technote.bpel2uddi.abbrev">BPEL-UDDI</abbrev>
          <authorgroup>
            <author><firstname>Claus</firstname><surname>von Riegen</surname></author>
            <author><firstname>Ivana</firstname><surname>Trickovic</surname></author>
          </authorgroup>
          <title><ulink url="http://www.oasis-open.org/committees/uddi-spec/doc/tn/uddi-spec-tc-tn-bpel.htm">Using BPEL4WS in a UDDI registry</ulink></title>
          <publishername>OASIS UDDI Spec TC</publishername>
          <pubdate>2004</pubdate>
        </biblioentry>
        <biblioentry id="javadoc.bpel2uddi">
          <abbrev id="javadoc.bpel2uddi.abbrev">BPEL2UDDI</abbrev>
          <title><ulink url="http://juddi.apache.org/apidocs/org/apache/juddi/v3/client/mapping/BPEL2UDDI.html">Apache jUDDI BPEL2UDDI Javadoc</ulink></title>
          <publishername>Apache jUDDI</publishername>
          <pubdate>2011</pubdate>
        </biblioentry>
        <biblioentry id="java.bpel2uddi">
          <abbrev id="java.bpel2uddi.abbrev">RFTSW-UDDI</abbrev>
          <title><ulink url="http://anonsvn.jboss.org/repos/riftsaw/trunk/runtime/uddi/src/main/java/org/jboss/soa/bpel/uddi/UDDIRegistrationImpl.java">JBoss RiftSaw UDDI Registration</ulink></title>
          <publishername>JBoss Riftsaw</publishername>
          <pubdate>2011</pubdate>
        </biblioentry>
        
        <biblioentry id="javadoc.servicelocator">
          <abbrev id="javadoc.servicelocator.abbrev">SERV-LOC</abbrev>
          <title><ulink url="http://juddi.apache.org/apidocs/org/apache/juddi/v3/client/mapping/ServiceLocator.html">Apache jUDDI ServiceLocator Javadoc</ulink></title>
          <publishername>Apache jUDDI</publishername>
          <pubdate>2011</pubdate>
        </biblioentry>
        </bibliolist></para>
    </sect1>


</chapter>
