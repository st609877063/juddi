<?xml version='1.0'?>
<!--
 * Copyright 2001-2009 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */ -->

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "jUDDI_User_Guide.ent">
%BOOK_ENTITIES;
]>

<!-- chapter: Database Setup -->
<chapter id="chap-database_setup">
    <title>Database Setup</title>
    
    <!-- section: Derby Out-of-the-Box -->
    <section id="sect-derby_OOB">
        <title>Derby Out-of-the-Box</title>
        <para>
        By default jUDDI uses an embedded Derby database. This allows us to build a 
        downloadable distribution that works out-of-the-box, without having to do any 
        database setup work. We recommend switching to an enterprise-level database 
        before going to production. JUDDI uses the Java Persistence API (JPA) in the back 
        end and we've tested with both OpenJPA and Hibernate. To configure which JPA 
        provider you want to use, you will need to edit the configuration in the 
        <filename>persistence.xml</filename>. This file can be found in the 
        <filename>juddi.war/WEB-INF/classes/META-INF/persistence.xml</filename>
        </para>
    
        <para>
        For Hibernate the content of this file looks like
        </para>
    
        <programlisting language="XML" ><xi:include href="extras/Database_Setup_1.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>

        <para>
        The <filename>persistence.xml</filename> reference a datasource
        <property>“java:comp/env/jdbc/JuddiDS”</property>. Datasource deployment is
        Application Server specific. If you are using Tomcat, then the datasource is
        defined in <filename>juddi/META-INF/context.xml</filename> which by default looks
        like
        </para>
    
        <programlisting language="XML" ><xi:include href="extras/Database_Setup_2.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>

    </section>
    

    <!-- section: Switch to MySQL -->
    <section id="sect-switch_to_mysql">
        <title>Switch to MySQL</title>

        <para>
        To switch over to MySQL you need to add the mysql driver (i.e. The
        <filename>mysql-connector-java-5.1.6.jar</filename>) to the classpath and you will
        need to edit the <filename>persistence.xml</filename>
        </para>

        <programlisting language="XML" ><xi:include href="extras/Database_Setup_3.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>

        <para>
        and the datasource. For tomcat you the <filename>context.xml</filename> should
        look something like
        </para>
    
        <programlisting language="XML" ><xi:include href="extras/Database_Setup_4.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>

        <warning>
            <para>
            Tomcat copies the <filename>context.xml</filename> to <filename>conf/CATALINA/localhost/juddiv3.xml</filename>, and if
            you update the <filename>context.xml</filename> it may not update this copy. You should simply
            delete the <filename>juddiv3.xml</filename> file after updating the <filename>context.xml</filename>.
            </para>
        </warning>

        <para>
        To create a MySQL database name <literal>juddiv3</literal> use
        </para>

        <screen><xi:include href="extras/Database_Setup_1.screen" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></screen>

        <para>
        and finally you probably want to switch to a user which is a bit less potent then
        '<literal>root</literal>'.
        </para>
        
    </section>
    
    <!-- section: Switch to Postgres -->
    <section id="sect-switch_to_postres">
        <title>Switch to Postgres</title>
        <para>
        This was written from a JBoss - jUDDI perspective. Non-JBoss-users may have to
        tweak this a little bit, but for the most part, the files and information needed
        is here.
        </para>
    
        <para>
        Logged in as postgres user, access psql:
        </para>
    
        <screen><xi:include href="extras/Database_Setup_2.screen" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></screen>

        <para>
        Note, for this example, my database is called juddi, as is the user who has full
        privileges to the database. The user 'juddi' has a password set to 'password'.
        </para>
    
        <programlisting language="XML" ><xi:include href="extras/Database_Setup_5.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>

        <para>
        In <filename>persistence.xml</filename>, reference the correct JNDI name of the
        datasource and remove the derby Dialect and add in the postgresql Dialect:
        </para>
    
        <programlisting language="XML" ><xi:include href="extras/Database_Setup_6.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>

        <para>
        Be sure to have <filename>postgresql-8.3-604.jdbc4.jar</filename> in the
        <filename>lib</filename> folder!
        </para>
    </section>
    
     <!-- section: Switch to Oracle 10 -->
    <section id="sect-switch_to_oracle">
        <title>Switch to Oracle</title>
        <para>
        To switch over to Oracle you need to add the oracle driver (i.e. the<filename>classes12.jar</filename>) to the 
        classpath and you will need to edit the <filename>persistence.xml</filename>
        </para>
        
        <programlisting language="XML" ><xi:include href="extras/Database_Setup_7.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        
        <para>
        To create a Oracle database name juddiv3 with the ultimate in minimalism use
        <programlisting>sqlplus> create database juddiv3;</programlisting>
        then you probably want to switch to a user which is a bit less potent then 'root' and set the appropriate password.
        </para>
        
        <warning>
			<title>Warning</title>
			<para>
				Tomcat copies the context.xml to conf/CATALINA/localhost/juddiv3.xml, and if you update the context.xml it may not update this copy. 
				You should simply delete the juddiv3.xml file after updating the context.xml.
			</para>
		</warning>
		
		<para>
		Please check the <xref linkend="sect-changing_oracle_sequence_name" >Administration Chapter</xref> if you want to change the Oracle Sequence name.
		</para>
        
    </section>
    
     <!-- section: Switch to HSQL -->
    <section id="sect-switch_to_hsql">
        <title>Switch to HSQL</title>

		<para>First make sure you have a running hsqldb. For a standalone server startup use:</para>
		<programlisting>
		java -cp hsqldb.jar org.hsqldb.server.Server --port 1747 --database.0 file:juddi --dbname.0 juddi
		</programlisting>
		<para>Next, connect the client manager to this instance using:</para>
		<programlisting>
		java -classpath hsqldb.jar org.hsqldb.util.DatabaseManagerSwing --driver org.hsqldb.jdbcDriver --url jdbc:hsqldb:hsql://localhost:1747/juddi  -user sa
		</programlisting>
		<para>and create the juddi user:</para>
		<programlisting language="SQL" >
		CREATE USER JUDDI PASSWORD "password"  ADMIN;
		CREATE SCHEMA JUDDI AUTHORIZATION JUDDI;
		SET DATABASE DEFAULT INITIAL SCHEMA JUDDI;
		ALTER USER juddi set initial schema juddi;
		</programlisting>
		<para>From now on, one can connect as JUDDI user to that database and the database is now ready to go.</para>
		
        <para>
        To switch over to HSQL you need to add the hsql driver (i.e. The
        <filename>hsqldb.jar</filename>) to the classpath and you will
        need to edit the <filename>persistence.xml</filename>
        </para>

        <programlisting language="XML" ><xi:include href="extras/Database_Setup_9.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>

        <para>
        and the datasource. For tomcat you the <filename>context.xml</filename> should
        look something like
        </para>
    
        <programlisting language="XML" ><xi:include href="extras/Database_Setup_10.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>

        <warning>
            <para>
            Tomcat copies the <filename>context.xml</filename> to <filename>conf/CATALINA/localhost/juddiv3.xml</filename>, and if
            you update the <filename>context.xml</filename> it may not update this copy. You should simply
            delete the <filename>juddiv3.xml</filename> file after updating the <filename>context.xml</filename>.
            </para>
        </warning>

    </section>
    
    <!-- section: Switch to &lt;other db&gt; -->
    <section id="sect-switch_to_other_DB">
        <title>Switch to &lt;other db&gt;</title>
        <para>
        If you use another database, please document, and send us what you had to change
        to make it work and we will include it here.
        </para>
    </section>
    
    <!-- section: set persistence props in juddiv3.properties -->
    <section id="sect-persistence_props">
        <title>Override persistence properties in the juddiv3.properties</title>
        <para>
        The juddiv3.properties file can be externalized; if you give the path of juddiv3.properties 
        in the JVM args, the juddiv3.properties will not be picked up from the WAR. To use this set the 
        <filename>juddi.propertiesFile</filename> to a location of your configuration file.
        This allows the user to change the juddi properties without having to open up the juddiv3.war file.
        For this usecase it makes sense that also persistence properties can be overriden as well
        in the juddiv3.properties file. The following properties can be set:
        </para>
        <table title="persistence properties">
        <tr><th>property name</th><th>description</th><th>example value</th></tr>
        <tr><td>persistenceProvider</td><td>JPA Implementation</td><td>Hibernate</td></tr>
        <tr><td>hibernate.connection.datasource</td><td>datasource name</td><td>java:/jdbc/JuddiDS</td></tr>
        <tr><td>hibernate.hbm2ddl.auto</td><td>hibernate to ddl setting </td><td>update</td></tr>
        <tr><td>hibernate.default_schema</td><td>Schema name</td><td>JuddiSchema</td></tr>
        <tr><td>hibernate.dialect</td><td>DataBase vendor name</td><td>org.hibernate.dialect.DB2Dialect</td></tr>
        </table>
    </section>
    
    
</chapter>
