<?xml version='1.0'?>
<!--
 * Copyright 2001-2009 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */ -->

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "jUDDI_User_Guide.ent">
%BOOK_ENTITIES;
]>

<!-- chapter: Subscription -->
<chapter id="chap-Subscription">
    <title>Subscription</title>
    
    <!-- section: Introduction -->
    <section id="sect-subscription_intro">
        <title>Introduction</title>
        <para>
        Subscriptions come to play in a multi-registry setup. Within your company you may
        have the need to run with more then one UDDI, let's say one for each department,
        where you limit access to the systems in each department to just their own UDDI
        node. However you may want to share some services cross departments. The
        subscription API can help you cross registering those services and keeping them up
        to date by sending out notifications as the registry information in the parent
        UDDI changes.
        </para>

        <para>
        There are two type of subscriptions:
        </para>
    
        <variablelist>
            <varlistentry>
                <term>asynchronous</term>
                <listitem>
                    <para>
                    Save a subscription, and receive updates on a certain schedule.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>synchronous</term>
                <listitem>
                    <para>
                    Save a subscription and invoke the get_Subscription and get a synchronous reply.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>

        <para>
        The notification can be executed in a synchronous and an asynchronous way. The
        asynchronous way requires a listener service to be installed on the node to which
        the notifications should be sent.
        </para>

    </section>
    

    <!-- section: Two node example setup: Sales and Marketing -->
    <section id="sect-Two_node_example">
        <title>Two node example setup: Sales and Marketing</title>
        <para>
        In this example we are setting up a node for 'sales' and a node for 'marketing'.
        For this you need to deploy jUDDI to two different services, then you need to do
        the following setup:
        </para>

        <!-- procedure: Setup Node 1: Sales -->
        <procedure id="proc-Two_node_example_Setup_Node1">
            <title>Setup Node 1: Sales</title>
            <step>
                <para>
                Create <filename>juddi_custom_install_data</filename>.
                </para>
                <screen><xi:include href="extras/Subscription_1.screen" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></screen>
            </step>
            <step>
                <para>
                edit: <filename>webapps/juddiv3/WEB-INF/classes/juddiv3.properties</filename> and set the following
                property values where 'sales' is the DNS name of your server.
                </para>
                <programlisting><xi:include href="extras/Subscription_1.properties" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </step>
            <step>
                <para>
                Start the server (tomcat), which will load the UDDI seed data (since this
                is the first time you're starting jUDDI, see 
                <xref linkend="chap-root_seed_data" />)
                </para>
                <screen><xi:include href="extras/Subscription_3.screen" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></screen>
            </step>
            <step>
                <para>
                Open your browser to <ulink url="http://sales:8080/juddiv3"/>.  You should see:
                </para>
            
               <!-- figure: Sales Node Installation -->
               <figure id="fig-sales_node_installation">
                   <title>Sales Node Installation</title>
                   <mediaobject>
                       <imageobject>
                           <imagedata fileref="images/sales_node_installation.png"  scalefit="1"/>
                       </imageobject>
                       <textobject>
                           <phrase>Sales Node Installation</phrase>
                       </textobject>
                   </mediaobject>
               </figure>
            
            </step>
        </procedure>
        
        <!-- procedure: Setup Node 2: Marketing -->
        <procedure>
            <title>Setup Node 2: Marketing</title>
            <step>
                <para>
                Create <filename>juddi_custom_install_data</filename>.
                </para>
                <screen><xi:include href="extras/Subscription_4.screen" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></screen>
            </step>
            <step>
                <para>
                edit: <filename>webapps/juddiv3/WEB-INF/classes/juddiv3.properties</filename> and set the following
                property values where 'marketing' is the DNS name of your server.
                </para>
                <programlisting><xi:include href="extras/Subscription_2.properties" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </step>
            <step>
                <para>
                Start the server (tomcat), which will load the UDDI seed data (since this
                is the first time you're starting jUDDI, see 
                <xref linkend="chap-root_seed_data" />)
                </para>
                <screen><xi:include href="extras/Subscription_5.screen" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></screen>
            </step>
            <step>
                <para>
                Open your browser to <ulink url="http://marketing:8080/juddiv3"/> . 
                You should see:
                </para>
                <!-- figure: Marketing Node Installation -->
                <figure id="fig-Marketing_Node_Installation">
                    <title>Marketing Node Installation</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/marketing_node_installation.png" scalefit="1"/>
                        </imageobject>
                        <textobject>
                            <phrase>Marketing Node Installation</phrase>
                        </textobject>
                    </mediaobject>
                </figure>
            </step>

         </procedure>
        
        
        <para>
        Note that we kept the root partition the same as sales and marketing are in the
        same company, however the Node Id and Name are different and reflect that this
        node is in 'sales' or 'marketing'.
        </para>

        <para>
        Finally you will need to replace the sales server's
	<filename>uddi-portlets.war/WEB-INF/classes/META-INF/uddi.xml</filename>
	with <filename>uddi-portlets.war/WEB-INF/classes/META-INF/uddi.xml.sales</filename>.
	Then, edit the
        <filename>uddi-portlets.war/WEB-INF/classes/META-INF/uddi.xml</filename> and set
        the following properties:
        </para>

        <programlisting  language="XML"><xi:include href="extras/Subscription_1.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        
        <para>
        Log into the sales portal: <ulink url="http://sales:8080/pluto"/> with 
        username/password: sales/sales.
        </para>

        <!-- figure: Sales Services -->
        <figure id="fig-sales_services">
            <title>Sales Services</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/sales_services.png"/>
                </imageobject>
                <textobject>
                    <phrase>Sales Services</phrase>
                </textobject>
            </mediaobject>
        </figure>

        <para>
        Before logging into the marketing portal, replace marketing's 
	<filename>uddi-portlet.war/WEB-INF/classes/META-INF/uddi.xml</filename>
	with <filename>udd-portlet.war/WEB-INF/classes/META-INF/uddi.xml.marketing</filename>.    
	Then you will need to edit the
        <filename>uddi-portlet.war/WEB-INF/classes/META_INF/uddi.xml</filename> and set
        the following properties:
        </para>
    
        <programlisting  language="XML"><xi:include href="extras/Subscription_2.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>

        <para>
        Now log into the marketing portal <ulink url="http://marketing:8080/pluto"/> with
        username/password: marketing/ marketing. In the browser for the marketing node we
        should now see:
        </para>

        <!-- figure: Marketing Services -->
        <figure id="fig-marketing_services">
            <title>Marketing Services</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/marketing_services.png"/>
                </imageobject>
                <textobject>
                    <phrase>Marketing Services</phrase>
                </textobject>
            </mediaobject>
        </figure>
        
        <para>
        Note that the subscriptionlistener is owned by the Marketing Node business (and
        not the Root Marketing Node). The Marketing Node Business is managed by the
        marketing publisher.
        </para>
        
    </section>

    <!-- section: Deploy the HelloSales Service -->
    <section id="sect-deploy_HelloSales_service">
        <title>Deploy the HelloSales Service</title>
        <para>
        The sales department developed a service called HelloSales. The HelloSales service
        is provided in the <filename>juddiv3-samples.war</filename>, and it is annotated
        so that it will auto-register. Before deploying the war, edit the
        <filename>juddiv3-samples.war/WEB-INF/classes/META-INF/uddi.xml</filename> file to
        set some property values to 'sales'.
        </para>
        
        <programlisting  language="XML"><xi:include href="extras/Subscription_3.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>

        <para>
        Now deploy the <filename>juddiv3-samples.war</filename> to the sales registry
        node, by building the <filename>juddiv3-samples.war</filename> and deploying. The
        HelloWorld service should deploy
        </para>

        <!-- figure: Registration by Annotation, deploying the juddi-samples.war to the sales Node -->
        <figure id="fig-Registration_Annotation">
            <title>Registration by Annotation, deploying the <filename>juddi-samples.war</filename> to the sales Node</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/registration_by_annotation.png"/>
                </imageobject>
                <textobject>
                    <phrase></phrase>
                </textobject>
            </mediaobject>
        </figure>
    
        <para>
        On the Marketing UDDI we'd like to subscribe to the HelloWord service, in the
        Sales UDDI Node. As mentioned before there are two ways to do this; synchronously
        and asynchronously.
        </para>

    </section>
    
    <!-- section: Configure a user to create Subscriptions -->
    <section id="sect-config_user_create_subscription">
        <title>Configure a user to create Subscriptions</title>
        <para>
        For a user to create and save subscriptions the publisher needs to have a valid
        login to both the sales and the marketing node. Also if the marketing publisher is
        going to create registry objects in the marketing node, the marketing publisher
        needs to own the sales keygenerator tModel. Check the
        <filename>marketing_*.xml</filename> files in the root seed data of both the
        marketing and sales node, if you want to learn more about this. It is important to
        understand that the 'marketing' publisher in the marketing registry owns the
        following tModels:
        </para>
    
        <programlisting   language="XML"><xi:include href="extras/Subscription_4.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>

		<para>
        If we are going to user the marketing publisher to subscribe to updates in the
        sales registry, then we need to provide this publisher with two clerks in the
        <filename>uddi.xml</filename> of the <filename>uddi-portlet.war</filename>.
		</para>
        
        <programlisting  language="XML"><xi:include href="extras/Subscription_5.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>

        <para>
        Here we created two clerks for this publisher called 'MarketingCratchit' and
        'SalesCratchit'. This will allow the publisher to check the existing subscriptions
        owned by this publisher in each of the two systems.
        </para>
    
    </section>
    
    <!-- section: Synchronous Notifications -->
    <section id="sect-synchronous_notifications">
        <title>Synchronous Notifications</title>
        <para>
        While being logged in as the marketing publisher on the marketing portal, we
        should see the following when selecting the UDDISubscription Portlet.
        </para>
    
        <!-- figure: Subscriptions. In (a) both nodes are up while in (b) the sales node is down -->
        <figure id="fig-Subscriptions_a_both_nodes_up_b_sales_node_is_down">
            <title>Subscriptions. In (a) both nodes are up while in (b) the sales node is down</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/a_bothup_b_sales_down.png"/>
                </imageobject>
                <textobject>
                    <phrase>Subscriptions. In (a) both nodes are up while in (b) the sales node is down</phrase>
                </textobject>
            </mediaobject>
        </figure>

        <para>
        When both nodes came up green you can lick on the 'new subscription' icon in the
        toolbar. Since we are going to use this subscription synchronously only the
        Binding Key and Notification Interval should be left blank, as shown in 
        <xref linkend="fig-create_a_new_subscription" />. Click the save icon to save the
        subscription.
        </para>

        <!-- figure: Create a New Subscription -->
        <figure id="fig-create_a_new_subscription">
            <title>Create a New Subscription</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/create_new_subscription.png"/>
                </imageobject>
                <textobject>
                    <phrase>Create a New Subscription</phrase>
                </textobject>
            </mediaobject>
        </figure>

        <para>
        Make sure that the subscription Key uses the convention of the keyGenerator of the
        marketing publisher. You should see the orange subscription icon appear under the
        “sales-ws” UDDI node.
        </para>
    
        <!-- figure: A Newly Saved Subscription -->
        <figure id="fig-newly_saved_subscription">
            <title>A Newly Saved Subscription</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/newly_saved_subscription.png"/>
                </imageobject>
                <textobject>
                    <phrase>A Newly Saved Subscription</phrase>
                </textobject>
            </mediaobject>
        </figure>

        <para>
        To invoke a synchronous subscription, click the icon with the green arrows. This
        will give you the opportunity to set the coverage period.
        </para>
        
        <!-- figure: Set the Coverage Period -->
        <figure id="fig-set_coverage_period">
            <title>Set the Coverage Period</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/set_coverage_period.png"/>
                </imageobject>
                <textobject>
                    <phrase>Set the Coverage Period</phrase>
                </textobject>
            </mediaobject>
        </figure>

        <para>
        Click the green arrows icon again to invoke the synchronous subscription request.
        The example finder request will go out to the sales node and look for updates on
        the HelloWorld service. The raw XML response will be posted in the
        UDDISubscriptionNotification Portlet.
        </para>
    
        <!-- figure: The Raw XML response of the synchronous Subscription request -->
        <figure id="fig-RawXML_response_of_the_synchronous_Subscription_request">
            <title>The Raw XML response of the synchronous Subscription request</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/raw_XML_response_synchronous_subscription_request.png"/>
                </imageobject>
                <textobject>
                    <phrase>The Raw XML response of the synchronous Subscription request</phrase>
                </textobject>
            </mediaobject>
        </figure>
        

        <para>
        The response will also be consumed by the marketing node. The marketing node will
        import the HelloWorld subscription information, as well as the sales business. So
        after a successful sync you should now see three businesses in the Browser Portlet
        of the marketing node, see <xref linkend="fig-registry_info_HelloWorld" />.
        </para>
    
        <!-- figure: The registry info of the HelloWorld Service information was imported by the subscription mechanism. -->
        <figure id="fig-registry_info_HelloWorld">
            <title>The registry info of the HelloWorld Service information was imported by the subscription mechanism.</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/registry_info_helloworld.png"/>
                </imageobject>
                <textobject>
                    <phrase>The registry info of the HelloWorld Service information was imported by the subscription mechanism.</phrase>
                </textobject>
            </mediaobject>
        </figure>
        

    </section>
    
    
    
</chapter>
